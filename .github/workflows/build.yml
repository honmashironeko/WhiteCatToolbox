name: Build and Package

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows x86_64
          - os: windows-latest
            arch: x86_64
            python-version: '3.11'
            artifact-name: whitecattoolbox-windows-x86_64
            archive-ext: zip
            
          # macOS x86_64 (Intel)
          - os: macos-13
            arch: x86_64
            python-version: '3.11'
            artifact-name: whitecattoolbox-macos-x86_64
            archive-ext: tar.gz
            
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            arch: arm64
            python-version: '3.11'
            artifact-name: whitecattoolbox-macos-arm64
            archive-ext: tar.gz
            
          # Linux x86_64
          - os: ubuntu-latest
            arch: x86_64
            python-version: '3.11'
            artifact-name: whitecattoolbox-linux-x86_64
            archive-ext: tar.gz

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --name whitecattoolbox --icon favicon.ico --add-data "wct_modules;wct_modules" --add-data "favicon.ico;." main.py
        
    - name: Build with PyInstaller (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --name whitecattoolbox --icon favicon.ico --add-data "wct_modules:wct_modules" --add-data "favicon.ico:." main.py
        
    - name: Create distribution directory
      run: |
        mkdir -p dist-package
        
    - name: Copy files to distribution (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy dist\whitecattoolbox.exe dist-package\
        xcopy config dist-package\config\ /E /I
        xcopy promotion dist-package\promotion\ /E /I
        xcopy tools dist-package\tools\ /E /I
        
    - name: Copy files to distribution (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        cp dist/whitecattoolbox dist-package/
        cp -r config dist-package/
        cp -r promotion dist-package/
        cp -r tools dist-package/
        
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist-package
        7z a -tzip ../whitecattoolbox-${{ matrix.arch }}.zip *
        
    - name: Create archive (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        cd dist-package
        tar -czf ../whitecattoolbox-${{ matrix.arch }}.tar.gz *
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: whitecattoolbox-${{ matrix.arch }}.${{ matrix.archive-ext }}
        retention-days: 30
        
    - name: Upload release asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: whitecattoolbox-${{ matrix.arch }}.${{ matrix.archive-ext }}
        asset_name: ${{ matrix.artifact-name }}.${{ matrix.archive-ext }}
        asset_content_type: application/octet-stream