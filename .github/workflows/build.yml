name: Build Cross-Platform Executables

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            platform: windows
            arch: x64
            python: '3.11'
            
          # macOS Intel
          - os: macos-13
            platform: macos
            arch: x64
            python: '3.11'
            
          # macOS Apple Silicon
          - os: macos-14
            platform: macos
            arch: arm64
            python: '3.11'
            
          # Linux x64
          - os: ubuntu-20.04
            platform: linux
            arch: x64
            python: '3.11'

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxcb-xinerama0 \
          libxcb-cursor0 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-shape0 \
          libxcb-xfixes0 \
          libqt6-dev \
          qt6-base-dev
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PySide6 pyinstaller
        
    - name: Install tool dependencies
      run: |
        pip install -r tools/dirsearch-master/requirements.txt || echo "No dirsearch requirements.txt found"
        
    - name: Create PyInstaller spec file
      run: |
        python -c "
import os
import platform

spec_content = '''
# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

# Tool data collection
dirsearch_data = []
sqlmap_data = []

# Collect dirsearch files
if os.path.exists('tools/dirsearch-master'):
    dirsearch_data = [
        ('tools/dirsearch-master/db', 'tools/dirsearch-master/db'),
        ('tools/dirsearch-master/lib', 'tools/dirsearch-master/lib'),
        ('tools/dirsearch-master/dirsearch.py', 'tools/dirsearch-master/'),
        ('tools/dirsearch-master/requirements.txt', 'tools/dirsearch-master/'),
        ('tools/dirsearch-master/wct_config.txt', 'tools/dirsearch-master/'),
        ('tools/dirsearch-master/env_config.json', 'tools/dirsearch-master/'),
    ]

# Collect sqlmap files
if os.path.exists('tools/sqlmap-master'):
    sqlmap_data = [
        ('tools/sqlmap-master/data', 'tools/sqlmap-master/data'),
        ('tools/sqlmap-master/lib', 'tools/sqlmap-master/lib'),
        ('tools/sqlmap-master/plugins', 'tools/sqlmap-master/plugins'),
        ('tools/sqlmap-master/tamper', 'tools/sqlmap-master/tamper'),
        ('tools/sqlmap-master/thirdparty', 'tools/sqlmap-master/thirdparty'),
        ('tools/sqlmap-master/extra', 'tools/sqlmap-master/extra'),
        ('tools/sqlmap-master/sqlmap.py', 'tools/sqlmap-master/'),
        ('tools/sqlmap-master/sqlmapapi.py', 'tools/sqlmap-master/'),
        ('tools/sqlmap-master/wct_config.txt', 'tools/sqlmap-master/'),
        ('tools/sqlmap-master/env_config.json', 'tools/sqlmap-master/'),
    ]

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('wct_modules', 'wct_modules'),
        ('config', 'config'),
        ('templates', 'templates'),
        ('favicon.ico', '.'),
        ('sitecustomize.py', '.'),
        ('promotion', 'promotion'),
        ('promotion_config.json', '.'),
    ] + dirsearch_data + sqlmap_data,
    hiddenimports=[
        'PySide6.QtCore',
        'PySide6.QtGui', 
        'PySide6.QtWidgets',
        'wct_modules.main_window',
        'wct_modules.config',
        'wct_modules.i18n',
        'wct_modules.styles',
        'wct_modules.utils',
        'wct_modules.widgets',
        'wct_modules.tool_operation',
        'wct_modules.process',
        'wct_modules.parameters',
        'wct_modules.templates',
        'wct_modules.theme',
        'wct_modules.process_tab',
        'wct_modules.promotion',
        'wct_modules.update_checker',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='WhiteCatToolbox',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='favicon.ico' if os.path.exists('favicon.ico') else None,
)
'''
with open('WhiteCatToolbox.spec', 'w', encoding='utf-8') as f:
    f.write(spec_content)
"
        
    - name: Build executable
      run: |
        pyinstaller WhiteCatToolbox.spec --distpath=dist --workpath=build
        
    - name: Create archive name
      id: archive_name
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          echo "name=WhiteCatToolbox-${{ matrix.platform }}-${{ matrix.arch }}.zip" >> $GITHUB_OUTPUT
          echo "executable=WhiteCatToolbox.exe" >> $GITHUB_OUTPUT
        else
          echo "name=WhiteCatToolbox-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz" >> $GITHUB_OUTPUT
          echo "executable=WhiteCatToolbox" >> $GITHUB_OUTPUT
        fi
        
    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd dist
        Compress-Archive -Path WhiteCatToolbox.exe -DestinationPath ../${{ steps.archive_name.outputs.name }}
        
    - name: Create archive (Unix)
      if: matrix.platform != 'windows'
      run: |
        cd dist
        tar -czf ../${{ steps.archive_name.outputs.name }} ${{ steps.archive_name.outputs.executable }}
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.archive_name.outputs.name }}
        path: ${{ steps.archive_name.outputs.name }}
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.zip
          **/*.tar.gz
        draft: true
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}