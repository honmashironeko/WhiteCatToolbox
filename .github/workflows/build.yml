name: Build Multi-Platform Releases

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            platform: windows
            arch: x64
            python-version: '3.11'
          
          # macOS
          - os: macos-latest
            platform: macos
            arch: x64
            python-version: '3.11'
          - os: macos-14  # Apple Silicon runner
            platform: macos
            arch: arm64
            python-version: '3.11'
          
          # Linux x64
          - os: ubuntu-20.04
            platform: linux
            arch: x64
            python-version: '3.11'
          # Linux arm64
          - os: ubuntu-20.04
            platform: linux
            arch: arm64
            python-version: '3.11'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up QEMU (for cross-platform builds)
      if: matrix.platform == 'linux' && matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v3

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build with PyInstaller (Windows)
      if: matrix.platform == 'windows'
      run: |
        pyinstaller --onefile --windowed --icon=favicon.ico --add-data "wct_modules;wct_modules" --name=WhiteCatToolbox main.py

    - name: Build with PyInstaller (macOS)
      if: matrix.platform == 'macos'
      run: |
        pyinstaller --onefile --windowed --icon=favicon.ico --add-data "wct_modules:wct_modules" --name=WhiteCatToolbox main.py

    - name: Build with PyInstaller (Linux x64)
      if: matrix.platform == 'linux' && matrix.arch == 'x64'
      run: |
        pyinstaller --onefile --icon=favicon.ico --add-data "wct_modules:wct_modules" --name=WhiteCatToolbox main.py

    - name: Build with PyInstaller (Linux arm64)
      if: matrix.platform == 'linux' && matrix.arch == 'arm64'
      run: |
        # Use cross-compilation or native arm64 runner when available
        pyinstaller --onefile --icon=favicon.ico --add-data "wct_modules:wct_modules" --name=WhiteCatToolbox main.py

    - name: Prepare package directory
      run: |
        mkdir -p package

    - name: Copy files to package (Windows)
      if: matrix.platform == 'windows'
      run: |
        copy dist\WhiteCatToolbox.exe package\
        xcopy config package\config\ /E /I
        xcopy promotion package\promotion\ /E /I
        copy sitecustomize.py package\

    - name: Copy files to package (macOS/Linux)
      if: matrix.platform != 'windows'
      run: |
        cp dist/WhiteCatToolbox package/
        cp -r config package/
        cp -r promotion package/
        cp sitecustomize.py package/

    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        7z a WhiteCatToolbox-${{ matrix.platform }}-${{ matrix.arch }}.zip ./package/*

    - name: Create archive (macOS/Linux)
      if: matrix.platform != 'windows'
      run: |
        tar -czf WhiteCatToolbox-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz -C package .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WhiteCatToolbox-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          WhiteCatToolbox-${{ matrix.platform }}-${{ matrix.arch }}.zip
          WhiteCatToolbox-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/WhiteCatToolbox-*.zip
          **/WhiteCatToolbox-*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}