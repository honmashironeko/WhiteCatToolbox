name: Build Multi-Platform Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows x64 (主流桌面)
          - os: windows-latest
            name: Windows-x64
            arch: x64
            ext: .exe
            build_args: --onefile --windowed --icon=config/favicon.png --add-data "translations;translations" --add-data "wct_modules;wct_modules" --add-data "config;config"
          
          # Windows x86 (32位兼容，老旧系统)
          - os: windows-latest
            name: Windows-x86
            arch: x86
            ext: .exe
            build_args: --onefile --windowed --icon=config/favicon.png --add-data "translations;translations" --add-data "wct_modules;wct_modules" --add-data "config;config"
          
          # macOS Intel x64 (Intel Mac) - 使用Intel runner
          - os: macos-13
            name: macOS-Intel
            arch: x64
            ext: ""
            build_args: --onefile --windowed --icon=config/favicon.png --add-data "translations:translations" --add-data "wct_modules:wct_modules" --add-data "config:config" --target-architecture x86_64
          
          # macOS Apple Silicon ARM64 (M1/M2/M3/M4 Mac) - 使用ARM runner
          - os: macos-14
            name: macOS-AppleSilicon
            arch: arm64
            ext: ""
            build_args: --onefile --windowed --icon=config/favicon.png --add-data "translations:translations" --add-data "wct_modules:wct_modules" --add-data "config:config" --target-architecture arm64
          
          # Linux x64 (主流服务器和桌面)
          - os: ubuntu-latest
            name: Linux-x64
            arch: x64
            ext: ""
            build_args: --onefile --windowed --icon=config/favicon.png --add-data "translations:translations" --add-data "wct_modules:wct_modules" --add-data "config:config"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: ${{ matrix.arch }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
      run: |
        # 显示当前架构信息
        echo "Current architecture: $(uname -m)"
        echo "Python architecture: $(python -c 'import platform; print(platform.machine())')"
        
        # macOS特殊构建参数
        pyinstaller ${{ matrix.build_args }} --name=WhiteCatToolbox-${{ matrix.name }} main.py
        
        # 验证生成的二进制文件架构
        file "dist/WhiteCatToolbox-${{ matrix.name }}"
        if command -v lipo &> /dev/null; then
          lipo -info "dist/WhiteCatToolbox-${{ matrix.name }}" || echo "Single architecture binary"
        fi
    
    - name: Build with PyInstaller (Non-macOS)
      if: matrix.os != 'macos-13' && matrix.os != 'macos-14'
      run: |
        pyinstaller ${{ matrix.build_args }} --name=WhiteCatToolbox-${{ matrix.name }} main.py
    
    - name: Create release package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        copy "dist\WhiteCatToolbox-${{ matrix.name }}${{ matrix.ext }}" release\
        copy README.md release\
        copy LICENSE release\
        mkdir release\tools
        mkdir release\config
        mkdir release\promotion
        copy config\* release\config\
        copy promotion\* release\promotion\
    
    - name: Create release package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release/tools
        mkdir -p release/config
        mkdir -p release/promotion
        cp "dist/WhiteCatToolbox-${{ matrix.name }}${{ matrix.ext }}" release/
        cp README.md release/
        cp LICENSE release/
        cp -r config/* release/config/
        cp -r promotion/* release/promotion/
        chmod +x "release/WhiteCatToolbox-${{ matrix.name }}${{ matrix.ext }}"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WhiteCatToolbox-${{ matrix.name }}
        path: release/
        retention-days: 30
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 创建macOS Universal Binary（同时支持Intel和Apple Silicon）
  build-macos-universal:
    needs: build
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download Intel build
      uses: actions/download-artifact@v4
      with:
        name: WhiteCatToolbox-macOS-Intel
        path: intel-build/
    
    - name: Download Apple Silicon build  
      uses: actions/download-artifact@v4
      with:
        name: WhiteCatToolbox-macOS-AppleSilicon
        path: arm-build/
    
    - name: Create Universal Binary
      run: |
        mkdir -p universal-build/tools
        mkdir -p universal-build/config
        mkdir -p universal-build/promotion
        
        # 复制其他文件（从Intel版本）
        cp intel-build/README.md universal-build/
        cp intel-build/LICENSE universal-build/
        cp -r intel-build/config/* universal-build/config/
        cp -r intel-build/promotion/* universal-build/promotion/
        
        # 使用lipo创建Universal Binary
        lipo -create \
          intel-build/WhiteCatToolbox-macOS-Intel \
          arm-build/WhiteCatToolbox-macOS-AppleSilicon \
          -output universal-build/WhiteCatToolbox-macOS-Universal
        
        chmod +x universal-build/WhiteCatToolbox-macOS-Universal
        
        # 验证Universal Binary
        file universal-build/WhiteCatToolbox-macOS-Universal
        lipo -info universal-build/WhiteCatToolbox-macOS-Universal
    
    - name: Upload Universal Binary
      uses: actions/upload-artifact@v4
      with:
        name: WhiteCatToolbox-macOS-Universal
        path: universal-build/
        retention-days: 30
    
    - name: Add to Release
      uses: softprops/action-gh-release@v1
      with:
        files: universal-build/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}